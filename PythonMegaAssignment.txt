## Assignment Part-1
Q1. Why do we call Python as a general purpose and high-level programming language?

- Not a machine-readable language.
- It needs to be processed (by a compiler of interpreter) before the machine reads can understand it.
- It is general purpose because it is versatile as it can be used to create data visualization, manipulation of data, web development, dev ops, machine learning etc. 


Q2. Why is Python called a dynamically typed language?
- Do not need to declare the type of variables
- It states it during the runtime 
- Has great management over memory  


Q3. List some pros and cons of Python programming language?
     Pros
- Highly Compatible 
- Object-Oriented
- Wide variety of Libraries
- has Built-in Data Structures
- Widely Applicable
- It Increases Speed and Productivity
- Easy to Learn 
- interpreted language 
- portability 
- Dynamically typed 

Cons 
- Slow than complied languages 
- High memory consumption 
- Dynamically typed can also be a challenge sometimes 
- Complex multithreading 
- Garbage collection could lead to memory losses



Q4. In what all domains can we use Python?
- Data sceinence, automation, app development, Ai & machine learning etc  


Q5. What are variable and how can we declare them?
Variable
- They are basic unit of storage in a programming language. 
- consists of a data type, the variable name, and the value to be assigned to the variable
Declaring
- name the variable
- Assign the necessary value.
- data type of the variable will be automatically determined from the value assigned, no compulsion to explicitly define it. 
 


Q6. How can we take an input from the user in Python?
- Name = input()


Q7. What is the default datatype of the value that has been taken as an input using input() function?

- String 


Q8. What is type casting? 
- convert the variable data type into a certain data type for certain operations to take place

Q9. Can we take more than one input from the user using single input() function? If yes, how? If no, why?

- It can take only one input. More than one input will show error 

Q10. What are keywords?

- keywords are special reserved words that have specific meanings and purposes and can’t be used for anything but those specific purposes.
- Example : if, else, def 


Q11. Can we use keywords as a variable? Support your answer with reason.
- No, They are used to define the syntax and structure in Python


Q12. What is indentation? What's the use of indentaion in Python?
- refers to the spaces at the beginning of a code line
- indicate a block of code


Q13. How can we throw some output in Python?
- Print()

Q14. What are operators in Python?
- special symbols that designate helps towards some computation to be performed


Q15. What is difference between / and // operators?
- / is division operator and performs division
- // division operator will not consider decimal 

Q16. Write a code that gives following as an output.
```
iNeuroniNeuroniNeuroniNeuron
str1 = "iNeuron" 
print(str1 * 4)


Q17. Write a code to take a number as an input from the user and check if the number is odd or even.
number = int(input("Enter a number "))
print("the number is =", number)
if number%2 == 0:
    print("Number is even")
else:
    print("number is odd")



Q18. What are boolean operator?
- AND, OR, NOT


Q19. What will the output of the following?
```
Considering 1 as true and 0 as false 
1 or 0  --> 1 (true)

0 and 0  --> 0 (false)

True and False and True  --> false

1 or 0 or 0  --> 1 (true )
```

Q20. What are conditional statements in Python?
- If , if else, nested if else 


Q21. What is use of 'if', 'elif' and 'else' keywords?
- The if / elif / else structure is a common way to control the flow of a program,
 allowing you to execute specific blocks of code depending on the value of some data



Q22. Write a code to take the age of person as an input and if age >= 18 display "I can vote". If age is < 18 display "I can't vote".
age = int(input("Enter your age "))
print("your age is =", age)

if age >= 18:
    print("I can vote")
else:
    print("i can not vote")
Q23. Write a code that displays the sum of all the even numbers from the given list.
```
numbers = [12, 75, 150, 180, 145, 525, 50]
```
numbers = [12, 75, 150, 180, 145, 525, 50]
sum_even = []
for num in numbers:
    if num % 2 == 0:
        sum_even.append(num)
       # print("Even list", sum_even)
       # print("sum even", sum(sum_even))
print("Even list", sum_even)
print("sum even", sum(sum_even))


Q24. Write a code to take 3 numbers as an input from the user and display the greatest no as output.

user_input = [int(input("Enter a number 1 =")), int(input("Enter a number 2 =")), int(input("Enter a number 3 ="))]

print("the max number is",max(user_input))




Q25. Write a program to display only those numbers from a list that satisfy the following conditions

- The number must be divisible by five

- If the number is greater than 150, then skip it and move to the next number

- If the number is greater than 500, then stop the loop
```
numbers = [12, 75, 150, 180, 145, 525, 50]
```

numbers = [12, 75, 150, 180, 145, 525, 50]
for num in numbers:
    if num >150:
        if num > 500:
            if num % 5 == 0:
                print(num)
            break
        continue

    if num % 5 == 0:
        print(num)


Q26. What is a string? How can we declare string in Python?

- It is a sequence of characters. Character is simply symbol 
- Declaration of sting 
str1 = “Paradise’s”
str2 = ‘Paradise’

Q27. How can we access the string using its index?
- can be accessed by specifying the string name followed by a number in square brackets ( [] ). Index starts with zero 

Q28. Write a code to get the desired output of the following?
string = "Big Data iNeuron"
desired_output = "iNeuron"




Q29. Write a code to get the desired output of the following
string = "Big Data iNeuron"
desired_output = "norueNi"



Q30. Resverse the string given in the above question.
string = "Big Data iNeuron"[::-1]

print(string)



Q31. How can you delete entire string at once?
string = "Big Data iNeuron"
del(string)


Q32. What is escape sequence?
-To insert characters that are illegal in a string, use an escape character.
For example \


Q33. How can you print the below string?
'iNeuron's Big Data Course'

string = "\'iNeuron's Big Data Course\'"
print(string)

Q34. What is a list in Python?
- Heterogeneous kind of data , sequential, stored n contigious memory location 

Q36. How can we access the elements in a list?
-  use the index operator []

Q37. Write a code to access the word "iNeuron" from the given list.
lst = [1,2,3,"Hi",[45,54, "iNeuron"], "Big Data"]

lst = [1,2,3,"Hi",[45,54, "iNeuron"], "Big Data"]
print(lst[4][2])


Q38. Take a list as an input from the user and find the length of the list.
list = input("enter what you want: ")
print("user input:", list)
list2 = list.split()
print("list : ", list2)
print("the list length is : ", len(list2))

Q39. Add the word "Big" in the 3rd index of the given list.
lst = ["Welcome", "to", "Data", "course"]


lst = ["Welcome", "to", "Data", "course"]
lst1 = "Big"
lst.insert(3,lst1)
print("the list is : ", lst)

abc@753de23dc7ce:~/workspace$ /bin/python /config/workspace/assigpthon1.py
the list is :  ['Welcome', 'to', 'Data', 'Big', 'course']

Q40. What is a tuple? How is it different from list?
- are used to store multiple items in a single variable.
- is a collection which is ordered and unchangeable.
- are written with round brackets
- list are immutable and use square bracket , consumes more storage space 


Q41. How can you create a tuple in Python?
- by enclosing all the comma-separated elements inside the parenthesis ()

Q42. Create a tuple and try to add your name in the tuple. Are you able to do it? Support your answer with reason.
- Tuples are immutable, but can append or concatenate.
- Insert can be used if we convert tuple to list 

Q43. Can two tuple be appended. If yes, write a code for it. If not, why?

tuple = (1,2,3,4,5,)
tuple1 = (6,7)
append = tuple + tuple1
print("append tuple :", append)

abc@753de23dc7ce:~/workspace$ /bin/python /config/workspace/assigpthon1.py
append tuple : (1, 2, 3, 4, 5, 6, 7)

Q44. Take a tuple as an input and print the count of elements in it.
tuple1 = input("enter what you want: ")
tuple2 = tuple(tuple1)
print("the tuple is",tuple2)
print(type(tuple2))
print("the length of tuple is : ", len(tuple2))

abc@753de23dc7ce:~/workspace$ /bin/python /config/workspace/assigpthon1.py
enter what you want: 12345
the tuple is ('1', '2', '3', '4', '5')
<class 'tuple'>
the length of tuple is :  5

Q45. What are sets in Python?
A set is an unordered collection of items. Every set element is unique (no duplicates) and must be immutable (cannot be changed).
However, a set itself is mutable. We can add or remove items from it.

Q46. How can you create a set?
my_set = {1, 2, 3}

or 
# initialize a with {}
a = {}

# check data type of a
print(type(a))

# initialize a with set()
a = set()

# check data type of a
print(type(a))

Q47. Create a set and add "iNeuron" in your set.
set1 = {"big" ,"data"}
print("the type is: ", type(set1))
set2 = {"iNeuron"}
print("the type is: ", type(set2))
set1.update(set2)
print(set1)

abc@4ff5209c1487:~/workspace$ /bin/python /config/workspace/assigpthon1.py
the type is:  <class 'set'>
the type is:  <class 'set'>
{'data', 'iNeuron', 'big'}


Q48. Try to add multiple values using add() function.

set1 = {1 , 2}
print("the type is: ", type(set1))
set1.add(3)
set1.add(4)
set1.add(5)
print(set1)

abc@4ff5209c1487:~/workspace$ /bin/python /config/workspace/assigpthon1.py
the type is:  <class 'set'>
{1, 2, 3, 4, 5}


Q49. How is update() different from add()?
- add() is used for a single element , while  update() is for the introduction of other set

Q50. What is clear() in sets?
- The clear() method removes all elements in a set.

Q51. What is frozen set?

- It is just an immutable version of a Python set object. 
- elements of a set can be modified at any time, elements of the frozen set remain the same after creation
- frozenset()

Q52. How is frozen set different from set?
-  elements of a set can be modified at any time, elements of the frozen set remain the same after creation
-  frozen sets can be used as keys in Dictionary or as elements of another set.

Q53.What is union() in sets? Explain via code.
- the values that are unique and common will be printed

set_1 = {1,2,3,4,5}
set_2 = {3,5,6,7,8}
print(type(set_1), type(set_2))
print(set_1 | set_2)

abc@4ff5209c1487:~/workspace$ /bin/python /config/workspace/assigpthon1.py
<class 'set'> <class 'set'>
{1, 2, 3, 4, 5, 6, 7, 8}

Q54. What is intersection() in sets? Explain via code.
- the value that are common will be printe
set = {1,2,3,4,5}
set1 = {4,5,6,7,8}
print(set & set1)
abc@4ff5209c1487:~/workspace$ /bin/python /config/workspace/assigpthon1.py
{4, 5}

Q55. What is dictionary in Python?
- are used to store data values in key:value pairs.
- is a collection which is ordered, changeable and do not allow duplicates

Q56. How is dictionary different from all other data structures.
- is a general-purpose data structure for storing a group of objects. 
- has a set of keys and each key has a single associated value. When presented with a key the dictionary will . A dictionary has a set of keys and each key has a single associated value.

Q57. How can we declare a dictionary in Python?
dictionary_name = {key: value}


Q58. What will the output of the following?
var = {}
print(type(var))

- dictionary 

Q59. How can we add an element in a dictionary?
dict_2 = {}
print(type(dict_2))
dict_2["Spain"]= 34
print("after adding", dict_2)

abc@4ff5209c1487:~/workspace$ /bin/python /config/workspace/assigpthon1.py
<class 'dict'>
after adding {'Spain': 34}


60. Create a dictionary and access all the values in that dictionary.
dict_1 = {'name': 'lu', 'year': '1993','surname': 'wang'}
print(type(dict_1))
print("the dictionary:", dict_1 )

abc@4ff5209c1487:~/workspace$ /bin/python /config/workspace/assigpthon1.py
<class 'dict'>
the dictionary: {'name': 'lu', 'year': '1993', 'surname': 'wang'}

Q61. Create a nested dictionary and access all the element in the inner dictionary.
dict2 = {}
dict2['name']= 'lu'
dict2['surname']= {'dsouza'}
dict3 = {'skills: karate', 'level: black'}
dict2['sport_details'] = dict3
print(dict2)

abc@9d343d336d6c:~/workspace$ /bin/python /config/workspace/assigpthon1.py
{'name': 'lu', 'surname': {'dsouza'}, 'sport_details': {'level: black', 'skills: karate'}}

Q62. What is the use of get() function?
- The get() method returns the value of the item with the specified key.
Example
- marks = {'Physics':67, 'Maths':87}
- 
- print(marks.get('Physics'))
- 
- 
- # Output: 67

Q63. What is the use of items() function?
- The items() method returns a view object that displays a list of dictionary's (key, value) tuple pairs.
Example
- marks = {'Physics':67, 'Maths':87}
- 
- print(marks.items())
- 
- 
- # Output: dict_items([('Physics', 67), ('Maths', 87)])

Q64. What is the use of pop() function?
- The pop() method removes the item at the given index from the list and returns the removed item.
Example
# create a list of prime numbers
prime_numbers = [2, 3, 5, 7]

# remove the element at index 2
removed_element = prime_numbers.pop(2)

print('Removed Element:', removed_element)
print('Updated List:', prime_numbers)

# Output: 
# Removed Element: 5
# Updated List: [2, 3, 7]



Q65. What is the use of popitems() function?
- The Python popitem() method removes and returns the last element (key, value) pair inserted into the dictionary.
- The order used is Last In, First Out (LIFO) order.
Example 
person = {'name': 'Phill', 'age': 22, 'salary': 3500.0}

# ('salary', 3500.0) is inserted at the last, so it is removed.
result = person.popitem()

print('Return Value = ', result)
print('person = ', person)

# inserting a new element pair
person['profession'] = 'Plumber'

# now ('profession', 'Plumber') is the latest element
result = person.popitem()

print('Return Value = ', result)
print('person = ', person)

Q66. What is the use of keys() function?
- The keys() method extracts the keys of the dictionary and returns the list of keys as a view object.
Examples
numbers = {1: 'one', 2: 'two', 3: 'three'}

# extracts the keys of the dictionary
dictionaryKeys = numbers.keys()


print(dictionaryKeys)

# Output: dict_keys([1, 2, 3])


Q67. What is the use of values() function?
- The values() method returns a view object that displays a list of all the values in the dictionary.
Examples
marks = {'Physics':67, 'Maths':87}

print(marks.values())


# Output: dict_values([67, 87])

Q68. What are loops in Python?
- Its means repeating something over and over until a particular condition is satisfied. 
- A for loop in Python is a control flow statement that is used to repeatedly execute a group of statements as long as the condition is satisfied. 
- Such a type of statement is also known as an iterative statement
Q69. How many type of loop are there in Python?
- There are two types of loops in Python, for and while.
Q70. What is the difference between for and while loops?
-  for loop and while loop is used to execute the statements repeatedly while the program runs. 
- The major difference between for loop and the while loop is that for loop is used when the number of iterations is known, whereas execution is done in the while loop until the statement in the program is proved wrong.

Q71. What is the use of continue statement?
- The continue statement skips the current iteration of the loop and continues with the next iteration. Its syntax is: continue;

Q72. What is the use of break statement?
- The break statement terminates the whole iteration of a loop 
- terminate a loop and skip


Q73. What is the use of pass statement?
- In Python programming, the pass statement is a null statement which can be used as a placeholder for future code.
- For example, we have a loop or a function that is not implemented yet, but we want to implement it in the future. In such cases, we can use the pass statement.

Q74. What is the use of range() function?
- range() allows the user to generate a series of numbers within a given range. Depending on how many arguments the user is passing to the function, the user can decide where that series of numbers will begin and end, as well as how big the difference will be between one number and the next.
Q75. How can you loop over a dictionary?
- You can loop through a dictionary by using a for loop. When looping through a dictionary, the return value are the keys of the dictionary, but there are methods to return the values as well
>>> a_dict = {'color': 'blue', 'fruit': 'apple', 'pet': 'dog'}
>>> for key in a_dict:
...     print(key)
...
color
fruit
pet

Q76. Write a Python program to find the factorial of a given number.
num = int(input("Enter a number: "))
print("the number num is :", num)
fact = 1
print(type(fact))

if num < 0:
  print("number can not be negative")
elif num == 0:
  print("number cannot be zero")
else:
  for i in range(1,num+1):
    fact = fact*i
  print("the number is", num , "and the factorial is", fact)

abc@1759011c97a8:~/workspace$ /bin/python /config/workspace/assigpthon1.py
Enter a number: 7
the number num is : 7
<class 'int'>
the number is 7 and the factorial is 5040

Q77. Write a Python program to calculate the simple interest. Formula to calculate simple interest is SI = (PRT)/100
p = int(input("your principal amount is"))
r = int(input("rate of interest is"))
t = int(input("the time period is"))

si = p*r*t/100

abc@1759011c97a8:~/workspace$ /bin/python /config/workspace/assigpthon1.py
your principal amount is1000
rate of interest is 5
the time period is 2
the simple interest is: 100.0

Q78. Write a Python program to calculate the compound interest. Formula of compound interest is A = P(1+ R/100)^t.
def compound(principle, rate , time):
  print("your principal amount is ", principle)
  print("rate of interest is " , rate)
  print("the time period is ", time)
  amount = principle * (pow((1 + rate / 100), time))
  ci = amount - principle
  print("the compound interest is :", ci)
compound(1000, 5, 2)

abc@fb07b6bc539d:~/workspace$ /bin/python /config/workspace/assigpthon1.py
your principal amount is  1000
rate of interest is  5
the time period is  2
the compound interest is : 102.5

Q79. Write a Python program to check if a number is prime or not.
num = int(input("Enter a number: "))
# prime numbers are greater than 1
if num > 1:
   # check for factors
   for i in range(2,num):
       if (num % i) == 0:
           print(num,"is not a prime number")
           print(i,"times",num//i,"is",num)
           break
   else:
       print(num,"is a prime number")
# if input number is less than or equal to 1, it is not prime

abc@fb07b6bc539d:~/workspace$ /bin/python /config/workspace/assigpthon1.py
Enter a number: 7
7 is a prime number
Q80. Write a Python program to check Armstrong Number.
# find the sum of the cube of each digit
temp = num
while temp > 0:
   digit = temp % 10
   sum += digit ** 3
   temp //= 10

# display the result
if num == sum:
   print(num,"is an Armstrong number")
else:
   print(num,"is not an Armstrong number")


abc@fb07b6bc539d:~/workspace$ /bin/python /config/workspace/assigpthon1.py
Enter a number: 67
67 is not an Armstrong number

Q81. Write a Python program to find the n-th Fibonacci Number.
def Fibonacci(n):
    if n<= 0:
        print("Incorrect input")
    elif n == 1:
        return 0
    elif n == 2:
        return 1
    else:
        return Fibonacci(n-1)+Fibonacci(n-2) 
print(Fibonacci(10))

Q82. Write a Python program to interchange the first and last element in a list.

x = input(" enter the  numerbers :")
list = [*x]
print("the number is :", list)
length = len(list)
print("the length is :", len(list))
temp1 = list[0]
print(temp1)
temp2 = list[len(list)-1]
print(temp2)
list.pop(0)
list.insert(0, temp2)
list.insert(len(list)-1, temp1)
length = len(list)
print("the length is :", len(list))
temp3 = list.pop()
print(temp3)
print(list)

abc@7bc9afb78bc2:~/workspace$ /bin/python /config/workspace/assigpthon1.py
 enter the  numerbers :12345
the number is : ['1', '2', '3', '4', '5']
the length is : 5
1
5
the length is : 6
5
['5', '2', '3', '4', '1']



Q83. Write a Python program to swap two elements in a list.

list = [1,2,3,4,5,6]

swap1 = list[0]
swap2 = list[2]

list.pop(0)
list.insert(0,swap2)

list.pop(2)
list.insert(2, swap1)

print("the list is :", list)

abc@62e6bd5abaa7:~/workspace$ /bin/python /config/workspace/assigpthon1.py
the list is : [3, 2, 1, 4, 5, 6]

Q84. Write a Python program to find N largest element from a list.

list = [1088,456,5567,256,356,689]
n = 2 
list.sort()
print(list[-n:])

abc@a2694dd98e18:~/workspace$ /bin/python /config/workspace/assigpthon1.py
[1088, 5567]

Q85. Write a Python program to find cumulative sum of a list.
def cumalativesum(list,sum):
   emptylist = []

   for i in list:
      sum = sum + i
      emptylist.append(sum)

   print("the cumalative list is:", emptylist)
list = [10,20,30,40,50]
sum = 0 
cumalativesum(list, sum)

abc@a2694dd98e18:~/workspace$ /bin/python /config/workspace/assigpthon1.py
the cumalative list is: [10, 30, 60, 100, 150]

Q86. Write a Python program to check if a string is palindrome or not.

def palindrome(stringa):
   print("the string is :", stringa)
   stringb = stringa[-1::-1]
   if (stringa == stringb):
      print("the string is palindrome")
   else:
      print("the string is not palindrome:", stringb)

stringa = input("Enter a string: ")
palindrome(stringa)

abc@a2694dd98e18:~/workspace$ /bin/python /config/workspace/assigpthon1.py
Enter a string: hi
the string is : hi
the string is not palindrome: ih

Q87. Write a Python program to remove i'th element from a string.

def ielement(string,i):
   print("the ith i.e.", i, "element of the string is", stringa[i])

stringa = input("Enter a name: ")
i = int(input("enter a number: "))

ielement(stringa,i)

abc@a2694dd98e18:~/workspace$ /bin/python /config/workspace/assigpthon1.py
Enter a name: lionel
enter a number: 2
the ith i.e. 2 element of the string is o


Q88. Write a Python program to check if a substring is present in a given string.

def substring(stringa, stringb):

   if stringb in stringa:
      print("the string", stringb,"is present in", stringa)
   else:
      print("not present")

stringa = input("enter a sentence: ")
stringb = input("what do you want to search in :")
substring(stringa, stringb)

abc@dcec7a4cde15:~/workspace$ /bin/python /config/workspace/assigpthon1.py
enter a sentence: hi how are you ?
what do you want to search in :are
the string are is present in hi how are you ?

Q89. Write a Python program to find words which are greater than given length k.
def word(stringa,k):
   stringb = stringa.split(" ")
   for x in stringb:  # x will now count the string "you" "are" "good"
      if len(x) > k:
         print(x)

stringa = input("enter a string")
k = int(input("enter a number"))
word(stringa,k)

bc@00048e2f91d0:~/workspace$ /bin/python /config/workspace/assigpthon1.py
enter a string what is your name where do you stay 
enter a number2
what
your
name
where
you
stay

Q90. Write a Python program to extract unquie dictionary values.
roll_details  = {1:"Ram", 2 : "vidya", 3: "somesh", 4: "Ram"}
print(str(set(roll_details.values())))

abc@00048e2f91d0:~/workspace$ /bin/python /config/workspace/assigpthon1.py
{'Ram', 'vidya', 'somesh'}

Q91. Write a Python program to merge two dictionary.
dict1 = {'a': 10, 'b': 8}
dict2 = {'d': 6, 'c': 4}

dict3 = {**dict1,**dict2}

print(dict3)

abc@00048e2f91d0:~/workspace$ /bin/python /config/workspace/assigpthon1.py
{'a': 10, 'b': 8, 'd': 6, 'c': 4}

Q92. Write a Python program to convert a list of tuples into dictionary.
Input : [('Sachin', 10), ('MSD', 7), ('Kohli', 18), ('Rohit', 45)]
Output : {'Sachin': 10, 'MSD': 7, 'Kohli': 18, 'Rohit': 45}

tuple = [('Sachin', 10), ('MSD', 7), ('Kohli', 18), ('Rohit', 45)]
print(type(tuple))
print("the dictionary is:", dict(tuple))

abc@00048e2f91d0:~/workspace$ /bin/python /config/workspace/assigpthon1.py
<class 'list'>
the dictionary is: {'Sachin': 10, 'MSD': 7, 'Kohli': 18, 'Rohit': 45}

Q93. Write a Python program to create a list of tuples from given list having number and its cube in each tuple.
Input: list = [9, 5, 6]
Output: [(9, 729), (5, 125), (6, 216)]

list = [9, 5, 6]
res = [(val,pow(val, 3)) for val in list]
print(res)
abc@00048e2f91d0:~/workspace$ /bin/python /config/workspace/assigpthon1.py
[(9, 729), (5, 125), (6, 216)]


Q94. Write a Python program to get all combinations of 2 tuples.
Input : test_tuple1 = (7, 2), test_tuple2 = (7, 8)
Output : [(7, 7), (7, 8), (2, 7), (2, 8), (7, 7), (7, 2), (8, 7), (8, 2)]

test_tuple1 = (7, 2)
test_tuple2 = (7, 8)

res = [(a, b) for a in test_tuple1 for b in test_tuple2]
res1 = [(a, b) for a in test_tuple2 for b in test_tuple1]

res3 = res + res1

print("The filtered tuple : ", res3)

abc@00048e2f91d0:~/workspace$ /bin/python /config/workspace/assigpthon1.py
The filtered tuple :  [(7, 7), (7, 8), (2, 7), (2, 8), (7, 7), (7, 2), (8, 7), (8, 2)]

Q95. Write a Python program to sort a list of tuples by second item.
Input : [('for', 24), ('Geeks', 8), ('Geeks', 30)] 
Output : [('Geeks', 8), ('for', 24), ('Geeks', 30)]

def Sort_Tuple(tup):
   
    tup.sort(key = lambda x: x[1])
    return tup

tup = [('for', 24), ('Geeks', 8), ('Geeks', 30)] 
 
print(Sort_Tuple(tup))

abc@00048e2f91d0:~/workspace$ /bin/python /config/workspace/assigpthon1.py
[('Geeks', 8), ('for', 24), ('Geeks', 30)]

Q96. Write a python program to print below pattern.
* 
* * 
* * * 
* * * * 
* * * * * 

n = int(input("enter the number of rows: "))
for i in range(0,n):
    for j in range(0,i+1):
        print("*", end = " ")
    print()


Q97. Write a python program to print below pattern.
    *
   **
  ***
 ****
*****

n = int(input("enter the number of rows: "))
for row in range(0,n):
    for space in range(0,n-row):
        print(" ", end='')
    
    for star in range(0,row+1):
        print("*", end='')
    print()    

Q98. Write a python program to print below pattern. 
     * 
    * * 
   * * * 
  * * * * 
 * * * * * 

n = int(input("enter the number of rows: "))
for row in range(0,n):
    for space in range(0,n-row):
        print(" ", end = "")
    for star in range(0,row+1):
        print("*", end = " ")
    print()

Q99. Q99. Write a python program to print below pattern.
 1 
 1 2 
 1 2 3 
 1 2 3 4 
 1 2 3 4 5 


# n = int(input("enter the number of rows: "))
# for i in range(0,n):
#     for j in range(i+1):
#         print( j+1 , end = " ")
#     print()

